name: "dsod24-github-ejs-build"
on: 
  workflow_dispatch:
    inputs:
      rt_npm_remote_repo_id:
        required: true
        type: string
        default: "npm-remote"
        description: "Artifactory Repository Name"
      rt_npm_curation_remote_repo_id:
        required: true
        type: string
        default: "sss-npm-remote"
        description: "NPM Curation Repository Name"
      rt_docker_repo:
        required: true
        type: string
        default: "voyagers-docker"
        description: "Artifactory Docker repository"
      docker_image_name:
        required: true
        type: string
        default: "ejs"
        description: "Docker Image name"
      xr_enable_scan:
        required: true
        type: string
        default: "false"
        description: "Scan with Xray"
      curation_audit:
        required: true
        type: string
        default: "false"
        description: "Audit with Curation"
      xr_override_fail_build:
        required: true
        type: string
        default: "false"
        description: "Set to false to ignore the fail build coming from Xray (exit code 3)"
      cli_log_level:
        required: true
        type: string
        default: "INFO"
        description: "Set JFrog CLI Log level"
permissions:
  actions: read           # for detecting the Github Actions environment
  id-token: write         # for creating OIDC tokens for signing
  packages: write         # for uploading attestations
  contents: read          # read the contents permission
  security-events: write  # for uploading code scanning
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: ${{ github.event.inputs.rt_docker_repo }}
      IMAGE_NAME: ${{ github.event.inputs.docker_image_name }}
      JFROG_CLI_LOG_LEVEL: ${{ github.event.inputs.cli_log_level }}
    # Here we install all the tools : docker buildx, QEMU, JDK 11, JFrog CLI
    steps:
      - name: Print Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install Node
        uses: actions/setup-node@v4
        with:
            node-version: 18
      
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: https://adoptioneplus.jfrog.io/
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
            oidc-provider-name: balajils1
            oidc-audience: balajils1
      
      - name: NPM Curation Audit 
        run: |
          if [ ${{ github.event.inputs.curation_audit }} == 'true' ]; then
            jf npmc --repo-resolve ${{ github.event.inputs.rt_npm_curation_remote_repo_id }}
            jf curation-audit
            rm -rf package-lock.json
          else
            echo "Skip Curation Audit!!!"
          fi

      - name: NPM Audit 
        run: |
          jf npmc --repo-resolve ${{ github.event.inputs.rt_npm_remote_repo_id }}
          jf npm i --omit dev
          
          if [ ${{ github.event.inputs.xr_enable_scan }} == 'true' ]; then
          	echo "Execute Xray scanning ..."
          	jf audit --npm --fail=${{ github.event.inputs.xr_override_fail_build }}
          else
          	echo "Skip Xray scanning!!!"
          fi

      - name: Docker Authenticate
        uses: docker/login-action@v3
        with:
          registry: https://adoptioneplus.jfrog.io
          username: ${{ secrets.JF_USER }}
          password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          tags: adoptioneplus.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          provenance: false
      
      - name: Docker Add Package to Build
        run: |  
           echo "adoptioneplus.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}@${{ steps.build.outputs.digest }}" > metadata.json
           jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

      - name: Docker Scan
        run: |
          echo "digest=$(docker images --no-trunc --quiet adoptioneplus.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }})" >> $GITHUB_OUTPUT
          jf docker pull adoptioneplus.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          jf docker scan adoptioneplus.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} --fail=${{ github.event.inputs.xr_override_fail_build }} --vuln
      
      - name: Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish
      
      - name: Build Scan
        run: |            
          jf build-scan --fail=${{ github.event.inputs.xr_override_fail_build }} --vuln
