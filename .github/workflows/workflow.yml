name: github-ejs-build

on: 
  workflow_dispatch:
    inputs:
      rt_npm_remote_repo_id:
        required: true
        type: string
        default: "expressjs-npm-remote"
        description: "Artifactory NPM Remote Repository Name"
      rt_npm_curation_remote_repo_id:
        required: true
        type: string
        default: "expressjs-npm-remote"
        description: "NPM Curation Repository Name"
      rt_docker_repo:
        required: true
        type: string
        default: "expressjs-docker-local"
        description: "Artifactory Docker Repository"
      docker_image_name:
        required: true
        type: string
        default: "ejs"
        description: "Docker Image Name"
      xr_enable_scan:
        required: true
        type: string
        default: "false"
        description: "Enable Xray Vulnerability Scan"
      curation_audit:
        required: true
        type: string
        default: "false"
        description: "Enable Curation Audit"
      xr_override_fail_build:
        required: true
        type: string
        default: "false"
        description: "Ignore Xray/Curation failures (exit code 3)"
      cli_log_level:
        required: true
        type: string
        default: "INFO"
        description: "JFrog CLI Log Level"

permissions:
  actions: read
  id-token: write
  packages: write
  contents: read
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: ${{ github.event.inputs.rt_docker_repo }}
      IMAGE_NAME: ${{ github.event.inputs.docker_image_name }}
      JFROG_CLI_LOG_LEVEL: ${{ github.event.inputs.cli_log_level }}

    steps:
      - name: 📄 Print Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"

      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🧰 Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: ☁️ Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: https://${{ vars.JF_URL }}/
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
          oidc-provider-name: github-expressjs
          oidc-audience: meghraj

      - name: 🧪 NPM Curation Audit
        if: ${{ github.event.inputs.curation_audit == 'true' }}
        run: |
          jf npmc --repo-resolve ${{ github.event.inputs.rt_npm_curation_remote_repo_id }}
          jf curation-audit
          rm -rf package-lock.json

      - name: 📦 NPM Install / Audit
        run: |
          jf npmc --repo-resolve ${{ github.event.inputs.rt_npm_remote_repo_id }}
          # jf npm i --omit dev
          
          if [[ "${{ github.event.inputs.xr_enable_scan }}" == "true" ]]; then
            echo "✅ Executing Xray scan..."
            jf audit --npm --fail=${{ github.event.inputs.xr_override_fail_build }}
          else
            echo "⚠️ Skipping Xray scan."
          fi

      - name: 🔐 Docker Authenticate
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: 🏗️ Docker Build and Push
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          provenance: false

      - name: 📦 Register Docker Image in Build Info
        run: |
          echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}@${{ steps.build.outputs.digest }}" > metadata.json
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json

      - name: 🔎 Docker Scan
        run: |
          jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} --fail=${{ github.event.inputs.xr_override_fail_build }} --vuln

      - name: 📝 Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish

      - name: 🧹 Final Build Scan
        run: |
          jf build-scan --fail=${{ github.event.inputs.xr_override_fail_build }} --vuln
